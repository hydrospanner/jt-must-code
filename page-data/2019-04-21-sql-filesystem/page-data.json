{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-04-21-sql-filesystem/",
    "result": {"data":{"site":{"siteMetadata":{"title":"John Tucker Must Code"}},"markdownRemark":{"id":"514b66d2-5970-547f-82b3-39170d0e0075","excerpt":"I was running out of disk space on my 128GB Surface Pro, so I needed to find out where all my space went.\nI made a python package, , to walk through a directory…","html":"<p>I was running out of disk space on my 128GB Surface Pro, so I needed to find out where all my space went.\nI made a python package, <a href=\"https://github.com/hydrospanner/directory_to_sql\"><code class=\"language-text\">directory_to_sql</code></a>, to walk through a directory tree, gather file system data, and store it in a SQLite database.</p>\n<p>The data retrieved includes:</p>\n<ul>\n<li>File sizes and modification date.</li>\n<li>Folder sizes and file counts.</li>\n<li>Recursive (including sub-folders) folder sizes and file counts.</li>\n</ul>\n<p>The package contains several queries to find top 10 largest files and folders. This was all I really needed to solve my space problem.</p>\n<p>The package returns a database connection to the SQL database, so it’s very extendable for further analysis. The package is published on <a href=\"https://pypi.org/project/directory-to-sql/\">PiPy</a> and uses Travis CI.</p>","frontmatter":{"title":"SQL Database of Filesystem","date":"April 21, 2019","description":"Filesystem analysis tool"}},"previous":{"fields":{"slug":"/2017-10-08-well-log-viz/"},"frontmatter":{"title":"Well Log Visualization"}},"next":{"fields":{"slug":"/2020-03-23-loggie/"},"frontmatter":{"title":"Well Log Django App"}}},"pageContext":{"id":"514b66d2-5970-547f-82b3-39170d0e0075","previousPostId":"fee06628-bf46-5f91-8380-41f569053c7c","nextPostId":"404eab32-7142-53b8-8eee-1291a366afc3"}},
    "staticQueryHashes": ["1804815106","2841359383"]}